document.addEventListener('DOMContentLoaded', function() {
    
    const sidebar = document.getElementById('sidebar');
    const mobileMenuToggle = document.getElementById('mobileMenuToggle');
    const mobileClose = document.getElementById('mobileClose');
    const navLinks = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('section');
    const scrollToTopBtn = document.getElementById('scrollToTop');
    const portfolioItems = document.querySelectorAll('.portfolio-item');
    const modal = document.getElementById('portfolioModal');
    const modalClose = document.getElementById('modalClose');
    const themeToggle = document.getElementById('themeToggle');

    const savedTheme = localStorage.getItem('theme') || 'dark';
    if (savedTheme === 'light') {
        document.body.classList.add('light-theme');
        themeToggle.querySelector('i').classList.replace('fa-moon', 'fa-sun');
    }

    themeToggle.addEventListener('click', function() {
        document.body.classList.toggle('light-theme');
        const icon = themeToggle.querySelector('i');
        
        if (document.body.classList.contains('light-theme')) {
            icon.classList.replace('fa-moon', 'fa-sun');
            localStorage.setItem('theme', 'light');
        } else {
            icon.classList.replace('fa-sun', 'fa-moon');
            localStorage.setItem('theme', 'dark');
        }
    });

    mobileMenuToggle.addEventListener('click', function() {
        sidebar.classList.add('active');
    });

    mobileClose.addEventListener('click', function() {
        sidebar.classList.remove('active');
    });

    document.addEventListener('click', function(e) {
        if (window.innerWidth <= 768) {
            if (!sidebar.contains(e.target) && !mobileMenuToggle.contains(e.target)) {
                sidebar.classList.remove('active');
            }
        }
    });

    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            navLinks.forEach(l => l.classList.remove('active'));
            this.classList.add('active');
            
            const targetId = this.getAttribute('href');
            const targetSection = document.querySelector(targetId);
            
            if (targetSection) {
                targetSection.scrollIntoView({ behavior: 'smooth' });
            }
            
            if (window.innerWidth <= 768) {
                sidebar.classList.remove('active');
            }
        });
    });

    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.2
    };

    const sectionObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
                
                const sectionId = entry.target.getAttribute('id');
                navLinks.forEach(link => {
                    link.classList.remove('active');
                    if (link.getAttribute('href') === `#${sectionId}`) {
                        link.classList.add('active');
                    }
                });
            }
        });
    }, observerOptions);

    sections.forEach(section => {
        sectionObserver.observe(section);
    });

    const statNumbers = document.querySelectorAll('.stat-number');
    let statsAnimated = false;

    const statsObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting && !statsAnimated) {
                statsAnimated = true;
                statNumbers.forEach(stat => {
                    const target = parseInt(stat.getAttribute('data-target'));
                    animateCounter(stat, 0, target, 2000);
                });
            }
        });
    }, observerOptions);

    const aboutSection = document.getElementById('about');
    if (aboutSection) {
        statsObserver.observe(aboutSection);
    }

    function animateCounter(element, start, end, duration) {
        let startTime = null;
        
        function animation(currentTime) {
            if (!startTime) startTime = currentTime;
            const progress = Math.min((currentTime - startTime) / duration, 1);
            const current = Math.floor(progress * (end - start) + start);
            element.textContent = current + (end > 10 ? '+' : '');
            
            if (progress < 1) {
                requestAnimationFrame(animation);
            }
        }
        
        requestAnimationFrame(animation);
    }

    const skillBars = document.querySelectorAll('.skill-progress');
    let skillsAnimated = false;

    const skillsObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting && !skillsAnimated) {
                skillsAnimated = true;
                skillBars.forEach(bar => {
                    const progress = bar.getAttribute('data-progress');
                    bar.style.setProperty('--progress-width', progress + '%');
                    bar.classList.add('animate');
                    setTimeout(() => {
                        bar.style.width = progress + '%';
                    }, 100);
                });
            }
        });
    }, observerOptions);

    const skillsSection = document.getElementById('skills');
    if (skillsSection) {
        skillsObserver.observe(skillsSection);
    }

    const timelineItems = document.querySelectorAll('.timeline-item');
    const timelineObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    }, observerOptions);

    timelineItems.forEach(item => {
        timelineObserver.observe(item);
    });

    window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
            scrollToTopBtn.classList.add('visible');
        } else {
            scrollToTopBtn.classList.remove('visible');
        }
    });

    scrollToTopBtn.addEventListener('click', function() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    });

   const projectData = {
    '1': {
        title: 'Netflix Clone',
        description: 'Netflix Clone is a full-stack web application that replicates the core experience of Netflix. It features a dynamic UI built with React, fetching real-time movie and TV show data via API integration. Users can browse categorized content such as Trending, Popular, and Originals, with smooth navigation and responsive design. Authentication and watchlist functionality provide a personalized experience, making it a strong showcase of frontend development, API handling, and user-centric design skills.',
        badge: 'REACT',
        image: 'assets/images/netflix-project.jpeg',
        demo: 'https://netflix-three-lovat.vercel.app/',
        code: 'https://github.com/kuruet/Netflix'
    },
    '2': {
        title: 'SwiftShare',
        description: 'SwiftShare is a lightweight web application that enables users to seamlessly upload and download files through a clean and intuitive interface. Built with modern web technologies, it focuses on speed, simplicity, and security to ensure hassle-free file transfers. This project solves the common problem of quickly sharing files without relying on bulky third-party tools or sign-ups. It demonstrates my ability to design, develop, and deploy full-stack web applications that are both functional and user-friendly.',
        badge: 'React & Node',
        image: 'assets/images/SwiftShare.jpeg',
        demo: 'https://k-i4q2.onrender.com/',
        code: 'https://github.com/kuruet/vaultX-fullstack'
    },
    '3': {
        title: 'Task Management App',
        description: 'A collaborative project management app...',
        badge: 'Full Stack',
        image: 'assets/images/project3.svg',
        demo: 'https://your-demo-link.com/task-app',
        code: 'https://github.com/yourusername/task-app'
    },
    '4': {
        title: 'Weather Forecast App',
        description: 'A real-time weather application...',
        badge: 'React & API',
        image: 'assets/images/project4.svg',
        demo: 'https://your-demo-link.com/weather-app',
        code: 'https://github.com/yourusername/weather-app'
    }
};


    portfolioItems.forEach(item => {
        item.addEventListener('click', function() {
            const projectId = this.getAttribute('data-project');
            const project = projectData[projectId];
            
            if (project) {
                document.getElementById('modalTitle').textContent = project.title;
                document.getElementById('modalDescription').textContent = project.description;
                document.getElementById('modalBadge').textContent = project.badge;
                
                const modalImage = document.getElementById('modalImage');
                modalImage.src = project.image;
                modalImage.alt = project.title;
                modalImage.onerror = function() {
                    this.src = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='900' height='400'%3E%3Crect fill='%23111111' width='900' height='400'/%3E%3Crect fill='%23f9b234' x='350' y='150' width='200' height='100' rx='10'/%3E%3Ctext fill='%23ffffff' font-family='Poppins,sans-serif' font-size='24' x='50%25' y='50%25' text-anchor='middle' dominant-baseline='middle'%3E${project.title}%3C/text%3E%3C/svg%3E`;
                };
                 const liveDemoBtn = document.querySelector('.modal-links .btn-primary');
    const sourceCodeBtn = document.querySelector('.modal-links .btn-secondary');
    liveDemoBtn.href = project.demo || '#';
    sourceCodeBtn.href = project.code || '#';
                
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
            }
        });
    });

    modalClose.addEventListener('click', closeModal);
    
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeModal();
        }
    });

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && modal.classList.contains('active')) {
            closeModal();
        }
    });

    function closeModal() {
        modal.classList.remove('active');
        document.body.style.overflow = 'auto';
    }

    const heroSection = document.getElementById('home');
    if (heroSection) {
        heroSection.classList.add('visible');
    }

    let lastScroll = 0;
    window.addEventListener('scroll', function() {
        const currentScroll = window.pageYOffset;
        
        if (currentScroll > lastScroll && currentScroll > 100) {
            if (window.innerWidth > 768) {
                document.body.style.paddingTop = '0';
            }
        }
        
        lastScroll = currentScroll;
    });









// 🌌 STARFIELD BACKGROUND ANIMATION
const canvas = document.getElementById('starfield');
if (canvas) {
    const ctx = canvas.getContext('2d');
    let stars = [];
    let numStars = 150;

    // Set canvas to window size
    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        createStars();
    }

    function createStars() {
        stars = [];
        for (let i = 0; i < numStars; i++) {
            stars.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                radius: Math.random() * 1.3,
                speed: 0.2 + Math.random() * 0.3,
                alpha: 0.5 + Math.random() * 0.5
            });
        }
    }

    function drawStars() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = 'white';
        stars.forEach(star => {
            ctx.globalAlpha = star.alpha;
            ctx.beginPath();
            ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
            ctx.fill();
        });
        ctx.globalAlpha = 1;
        moveStars();
        requestAnimationFrame(drawStars);
    }

    function moveStars() {
        stars.forEach(star => {
            star.y += star.speed;
            if (star.y > canvas.height) {
                star.y = 0;
                star.x = Math.random() * canvas.width;
            }
        });
    }

    resizeCanvas();
    drawStars();
    window.addEventListener('resize', resizeCanvas);
}



});
